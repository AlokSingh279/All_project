package com.StriverSheet;

import java.util.Arrays;

public class Successful_pairs {

	public static void main(String[] args) {

		int[] spells = { 5, 1, 3 };
		int[] potions = { 1, 2, 3, 4, 5 };
		long success = 7;
		
		

		int[] pairs = successfulPairs(spells, potions, success);
		for (int i = 0; i < pairs.length; i++) {
			System.out.print(pairs[i] + " ");
		}
	}
	
	String[] arr= {"cb",};

	public static int[] successfulPairs(int[] spells, int[] potions, long success) {
		int n = spells.length;
		int m = potions.length;
		int[] pair = new int[n];

		// Sort potions array for binary search
		Arrays.sort(potions);

		for (int i = 0; i < n; i++) {
			int lo = 0;
			int hi = m - 1;
			int spell = spells[i];

			// Perform binary search to find the smallest valid potion
			while (lo <= hi) {
				int mid = lo + (hi - lo) / 2;
				long product = (long) spell * potions[mid];

				if (product >= success) {
					hi = mid - 1; // We can potentially reduce the range
				} else {
					lo = mid + 1; // We need a larger potion
				}
			}

			// After binary search, lo will be the index of the first valid potion
			// The number of valid potions will be from index `lo` to the end of the array
			pair[i] = m - lo;
		}

		return pair;
	}
}

